/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rhythm;

import misc.DrumSet;
import misc.UsbWriter;
import dao.SequencePattern;
import dao.Song;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.Collection;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
/**
 *
 * @author Tomek
 */
public class MainFrame extends javax.swing.JFrame {
    private EntityManagerFactory emf;
    private EntityManager em;
    private boolean UsbResult;
    private Song currentSong;
    private SequencePattern currentSequence;   
    public static DrumSet[][] currentPatternData;   
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        emf = Persistence.createEntityManagerFactory("RhythmPU");
        em = emf.createEntityManager();
        initComponents();
        UsbResult = UsbWriter.init("COM4","Rhythm");
        currentPatternData = new DrumSet[5][];      
        currentPatternData[0] = new DrumSet[4];
        currentPatternData[1] = new DrumSet[4];
        currentPatternData[2] = new DrumSet[4];
        currentPatternData[3] = new DrumSet[4];
        currentPatternData[4] = new DrumSet[4];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patternScrollPane = new javax.swing.JScrollPane();
        rhythmTable = new javax.swing.JTable();
        instrumentComboBox = new javax.swing.JComboBox<>();
        drumPatternLabel = new javax.swing.JLabel();
        beatLabel = new javax.swing.JLabel();
        instrumentLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        resolutionLabel = new javax.swing.JLabel();
        resolutionComboBox = new javax.swing.JComboBox<>();
        timeSpinner = new javax.swing.JSpinner();
        paneSeparator = new javax.swing.JSeparator();
        sequenceScrollPane = new javax.swing.JScrollPane();
        sequenceTable = new javax.swing.JTable();
        savePatternButton = new javax.swing.JButton();
        currentPatternComboBox = new javax.swing.JComboBox<>();
        saveSequenceButton = new javax.swing.JButton();
        selectPatternLabel = new javax.swing.JLabel();
        numberOfBeats = new javax.swing.JComboBox<>();
        leftHandLabel = new javax.swing.JLabel();
        rightHandLabel = new javax.swing.JLabel();
        leftFootLabel = new javax.swing.JLabel();
        rightFootLabel = new javax.swing.JLabel();
        bassGuitarLabel = new javax.swing.JLabel();
        playPatternButton = new javax.swing.JButton();
        playSequenceButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenuOpen = new javax.swing.JMenuItem();
        fileMenuClose = new javax.swing.JMenuItem();
        fileMenuSave = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(0, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        patternScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        rhythmTable.setShowGrid(true);
        rhythmTable.setDefaultRenderer(Object.class, new misc.CustomCellRenderer());
        rhythmTable.setDefaultEditor(Object.class, null);
        rhythmTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        rhythmTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        rhythmTable.setGridColor(new java.awt.Color(0, 0, 0));
        rhythmTable.setName("patternTable"); // NOI18N
        rhythmTable.setOpaque(false);
        rhythmTable.setRequestFocusEnabled(false);
        rhythmTable.setRowHeight(20);
        rhythmTable.setRowSelectionAllowed(false);
        rhythmTable.setColumnSelectionAllowed(false);
        rhythmTable.setCellSelectionEnabled(false);
        rhythmTable.setShowHorizontalLines(true);
        rhythmTable.setShowVerticalLines(true);
        rhythmTable.setRowSelectionAllowed(false);
        rhythmTable.setTableHeader(null);
        rhythmTable.setUpdateSelectionOnSort(false);
        rhythmTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rhythmTableMouseClicked(evt);
            }
        });
        patternScrollPane.setViewportView(rhythmTable);

        instrumentComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(DrumSet.displayValues()));
        instrumentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrumentComboBoxActionPerformed(evt);
            }
        });

        drumPatternLabel.setText("Current drum pattern");

        beatLabel.setText("Beats");

        instrumentLabel.setText("Instrument");

        timeLabel.setText("Time");

        resolutionLabel.setText("Division");

        resolutionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32" }));
        resolutionComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                resolutionComboBoxItemStateChanged(evt);
            }
        });
        resolutionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolutionComboBoxActionPerformed(evt);
            }
        });

        timeSpinner.setValue(60);

        sequenceTable.setTableHeader(null);
        sequenceTable.setShowGrid(true);
        sequenceTable.setColumnSelectionAllowed(false);
        sequenceTable.setRowSelectionAllowed(false);
        sequenceTable.setDefaultRenderer(Object.class, new misc.CustomCellRenderer());
        rhythmTable.setDefaultEditor(Object.class, null);
        sequenceTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        sequenceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        sequenceTable.setAutoscrolls(false);
        sequenceTable.setGridColor(new java.awt.Color(0, 0, 0));
        sequenceTable.setName("sequenceTable"); // NOI18N
        sequenceTable.setOpaque(false);
        sequenceTable.setTableHeader(null);
        sequenceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sequenceTableMouseClicked(evt);
            }
        });
        sequenceScrollPane.setViewportView(sequenceTable);

        savePatternButton.setText("Save pattern");
        savePatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePatternButtonActionPerformed(evt);
            }
        });

        saveSequenceButton.setText("Save sequence");
        saveSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSequenceButtonActionPerformed(evt);
            }
        });

        selectPatternLabel.setText("Select pattern");

        numberOfBeats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        numberOfBeats.setSelectedIndex(3);
        numberOfBeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfBeatsActionPerformed(evt);
            }
        });

        leftHandLabel.setText("Left hand");

        rightHandLabel.setText("Right hand");

        leftFootLabel.setText("Left foot");

        rightFootLabel.setText("Right foot");

        bassGuitarLabel.setText("Bass guitar");

        playPatternButton.setText("Play pattern");
        playPatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPatternButtonActionPerformed(evt);
            }
        });

        playSequenceButton.setText("Play sequence");
        playSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSequenceButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        fileMenuOpen.setText("Open rhythm");
        fileMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuOpenActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuOpen);

        fileMenuClose.setText("Close rhythm");
        fileMenuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuCloseActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuClose);

        fileMenuSave.setText("Save rhythm");
        fileMenu.add(fileMenuSave);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneSeparator)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playSequenceButton)
                        .addGap(58, 58, 58)
                        .addComponent(saveSequenceButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(leftHandLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rightHandLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(leftFootLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(54, 54, 54))
                            .addComponent(rightFootLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bassGuitarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patternScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 906, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(instrumentLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(instrumentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(beatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(numberOfBeats, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resolutionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resolutionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(selectPatternLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentPatternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66)
                .addComponent(playPatternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(savePatternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drumPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sequenceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(leftHandLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rightHandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(leftFootLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rightFootLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bassGuitarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(patternScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(instrumentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(beatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(instrumentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(savePatternButton)
                                    .addComponent(playPatternButton)
                                    .addComponent(numberOfBeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(resolutionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(resolutionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(selectPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(currentPatternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(paneSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playSequenceButton)
                    .addComponent(saveSequenceButton))
                .addGap(18, 18, 18)
                .addComponent(sequenceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(269, 269, 269))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuOpenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuOpenActionPerformed

    private void fileMenuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuCloseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuCloseActionPerformed

    private void rhythmTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rhythmTableMouseClicked
//        L_HAND	row 0
//        R_HAND	row 1
//        L_FOOT	row 2
//        R_FOOT	row 3
//        BASS          row 4
        
        int row = rhythmTable.getSelectedRow();
        int column = rhythmTable.getSelectedColumn();
        int index = instrumentComboBox.getSelectedIndex();
        DrumSet currentInstrument = DrumSet.getObject(index);        
       
        // validate if instruments are assigned to correct part of body
        switch (row) {
            // hands
            case 0:
            case 1:                
                switch(currentInstrument){
                    case ACOUSTIC_BASS_DRUM:
                    case BASS_GUITAR:
                    case PEDAL_HI_HAT:  System.out.println("Wrong part of body");
                    return;
                }   break;
             // feet
            case 2:
            case 3:               
                switch(currentInstrument){
                    case SIDE_STICK:
                    case ACOUSTIC_SNARE:
                    case COWBELL:
                    case LOW_FLOOR_TOM:
                    case HIGH_FLOOR_TOM:
                    case LOW_MID_TOM:
                    case HI_MID_TOM:
                    case HIGH_TOM:
                    case CLOSED_HI_HAT:
                    case OPEN_HI_HAT:
                    case CRASH_CYMBAL_1:
                    case RIDE_CYMBAL_2:
                    case SPLASH_CYMBAL:
                    case CHINESE_CYMBAL:    
                    case BASS_GUITAR:   System.out.println("Wrong part of body");
                                        return;
                    
                }   break;
            // bass
            default:    if(currentInstrument != DrumSet.BASS_GUITAR){
                            System.out.println("Wrong instrument. Select bass guitar");
                            return;
                        }
         
        }       
        if(currentPatternData[row][column] == null || currentPatternData[row][column] != currentInstrument)
            currentPatternData[row][column] = currentInstrument;        
        else
            currentPatternData[row][column] = null;
        
        String value = (String)rhythmTable.getValueAt(rhythmTable.getSelectedRow(), rhythmTable.getSelectedColumn());
        UsbResult = UsbWriter.sendBytes("$".getBytes());
        if(value == null)
            rhythmTable.setValueAt(" ", rhythmTable.getSelectedRow(), rhythmTable.getSelectedColumn());
        else
            rhythmTable.setValueAt(null, rhythmTable.getSelectedRow(), rhythmTable.getSelectedColumn());
       
        switch(evt.getButton()){
            case 1: System.out.println("Left");                    
                    break;
            case 3: System.out.println("Right");
            
        }
        rhythmTable.getSelectedColumn();
        rhythmTable.getSelectedRow();
    }//GEN-LAST:event_rhythmTableMouseClicked

    private void savePatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePatternButtonActionPerformed
        Query query = em.createNamedQuery("Song.findAll");        
        Collection songs = query.getResultList();
        System.out.println(songs);
//        Pattern p = new Pattern();        
//        p.setBeats(1);
//        em.getTransaction().begin();
//        em.persist(p);        
//        em.getTransaction().commit();
    }//GEN-LAST:event_savePatternButtonActionPerformed

    private void saveSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSequenceButtonActionPerformed
        SequencePattern s = new SequencePattern();
        s.setPatternID(1);
        s.setSeqNum(1);
        
        em.getTransaction().begin();
        em.persist(s);
        em.getTransaction().commit();
    }//GEN-LAST:event_saveSequenceButtonActionPerformed

    private void sequenceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sequenceTableMouseClicked
        String value = (String)sequenceTable.getValueAt(sequenceTable.getSelectedRow(), sequenceTable.getSelectedColumn());
        if(value == null)
            sequenceTable.setValueAt("", sequenceTable.getSelectedRow(), sequenceTable.getSelectedColumn());
        else
            sequenceTable.setValueAt(null, sequenceTable.getSelectedRow(), sequenceTable.getSelectedColumn());
    }//GEN-LAST:event_sequenceTableMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void resolutionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolutionComboBoxActionPerformed
        setRhythmTableModel();
        
    }//GEN-LAST:event_resolutionComboBoxActionPerformed

    private void resolutionComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_resolutionComboBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_resolutionComboBoxItemStateChanged

    private void playPatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playPatternButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playPatternButtonActionPerformed

    private void playSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSequenceButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playSequenceButtonActionPerformed

    private void numberOfBeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfBeatsActionPerformed
        setRhythmTableModel();
    }//GEN-LAST:event_numberOfBeatsActionPerformed

    private void instrumentComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instrumentComboBoxActionPerformed
        int index = instrumentComboBox.getSelectedIndex();
        DrumSet currentInstrument = DrumSet.getObject(index);
    }//GEN-LAST:event_instrumentComboBoxActionPerformed

    private void setRhythmTableModel(){
        int division = Integer.parseInt(resolutionComboBox.getSelectedItem().toString());
        int beats = Integer.parseInt(numberOfBeats.getSelectedItem().toString());
        int cols = division * beats;
        if(cols > 32)
            cols = 32;
        rhythmTable.setModel(new javax.swing.table.DefaultTableModel(5,cols ));
        currentPatternData[0] = new DrumSet[cols];
        currentPatternData[1] = new DrumSet[cols];
        currentPatternData[2] = new DrumSet[cols];
        currentPatternData[3] = new DrumSet[cols];
        currentPatternData[4] = new DrumSet[cols];
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
            
        });
        
        
        
    }
    
    // window closing handler
        WindowListener wl = new WindowAdapter(){
            public void windowClosing(WindowEvent e){
                em.close();
                emf.close();
            }
        };
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bassGuitarLabel;
    private javax.swing.JLabel beatLabel;
    private javax.swing.JComboBox<String> currentPatternComboBox;
    private javax.swing.JLabel drumPatternLabel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenuClose;
    private javax.swing.JMenuItem fileMenuOpen;
    private javax.swing.JMenuItem fileMenuSave;
    private javax.swing.JComboBox<String> instrumentComboBox;
    private javax.swing.JLabel instrumentLabel;
    private javax.swing.JLabel leftFootLabel;
    private javax.swing.JLabel leftHandLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JComboBox<String> numberOfBeats;
    private javax.swing.JSeparator paneSeparator;
    private javax.swing.JScrollPane patternScrollPane;
    private javax.swing.JButton playPatternButton;
    private javax.swing.JButton playSequenceButton;
    private javax.swing.JComboBox<String> resolutionComboBox;
    private javax.swing.JLabel resolutionLabel;
    private javax.swing.JTable rhythmTable;
    private javax.swing.JLabel rightFootLabel;
    private javax.swing.JLabel rightHandLabel;
    private javax.swing.JButton savePatternButton;
    private javax.swing.JButton saveSequenceButton;
    private javax.swing.JLabel selectPatternLabel;
    private javax.swing.JScrollPane sequenceScrollPane;
    private javax.swing.JTable sequenceTable;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JSpinner timeSpinner;
    // End of variables declaration//GEN-END:variables
}
