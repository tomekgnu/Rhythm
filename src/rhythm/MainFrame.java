/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rhythm;

import misc.MidiInstrument;
import misc.UsbWriter;
import dao.SequencePattern;
import dao.Song;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.Collection;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
/**
 *
 * @author Tomek
 */
public class MainFrame extends javax.swing.JFrame {
    private EntityManagerFactory emf;
    private EntityManager em;
    private boolean usbResult;
    private Song currentSong;
    private SequencePattern currentSequence;   
    private int currentNote;
    private int currentOctave;
    private boolean togglePlayback;
    private Playback pattern;
    private MidiEvent currentEvent;
    public static MidiEvent[][] currentPatternData;
  
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        emf = Persistence.createEntityManagerFactory("RhythmPU");
        em = emf.createEntityManager();
        initComponents();
        usbResult = UsbWriter.init("COM4","Rhythm");
        currentPatternData = new MidiEvent[5][];      
        currentPatternData[0] = new MidiEvent[4];
        currentPatternData[1] = new MidiEvent[4];
        currentPatternData[2] = new MidiEvent[4];
        currentPatternData[3] = new MidiEvent[4];
        currentPatternData[4] = new MidiEvent[4];
        togglePlayback  = false;
        currentNote =  0; // 24 = C contra
        currentOctave = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patternScrollPane = new javax.swing.JScrollPane();
        rhythmTable = new javax.swing.JTable();
        instrumentComboBox = new javax.swing.JComboBox<>();
        drumPatternLabel = new javax.swing.JLabel();
        beatLabel = new javax.swing.JLabel();
        instrumentLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        resolutionLabel = new javax.swing.JLabel();
        divisionComboBox = new javax.swing.JComboBox<>();
        timeSpinner = new javax.swing.JSpinner();
        paneSeparator = new javax.swing.JSeparator();
        sequenceScrollPane = new javax.swing.JScrollPane();
        sequenceTable = new javax.swing.JTable();
        savePatternButton = new javax.swing.JButton();
        currentPatternComboBox = new javax.swing.JComboBox<>();
        saveSequenceButton = new javax.swing.JButton();
        selectPatternLabel = new javax.swing.JLabel();
        numberOfBeats = new javax.swing.JComboBox<>();
        leftHandLabel = new javax.swing.JLabel();
        rightHandLabel = new javax.swing.JLabel();
        leftFootLabel = new javax.swing.JLabel();
        rightFootLabel = new javax.swing.JLabel();
        bassGuitarLabel = new javax.swing.JLabel();
        playPatternButton = new javax.swing.JButton();
        playSequenceButton = new javax.swing.JButton();
        noteSelectComboBox = new javax.swing.JComboBox<>();
        noteLabel = new javax.swing.JLabel();
        octaveLabel = new javax.swing.JLabel();
        octaveSelectComboBox = new javax.swing.JComboBox<>();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenuOpen = new javax.swing.JMenuItem();
        fileMenuClose = new javax.swing.JMenuItem();
        fileMenuSave = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(0, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        patternScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        rhythmTable.setShowGrid(true);
        rhythmTable.setDefaultRenderer(Object.class, new CustomCellRenderer());
        rhythmTable.setDefaultEditor(Object.class, null);
        rhythmTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        rhythmTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        rhythmTable.setGridColor(new java.awt.Color(0, 0, 0));
        rhythmTable.setName("patternTable"); // NOI18N
        rhythmTable.setOpaque(false);
        rhythmTable.setRequestFocusEnabled(false);
        rhythmTable.setRowHeight(20);
        rhythmTable.setRowSelectionAllowed(false);
        rhythmTable.setColumnSelectionAllowed(false);
        rhythmTable.setCellSelectionEnabled(false);
        rhythmTable.setShowHorizontalLines(true);
        rhythmTable.setShowVerticalLines(true);
        rhythmTable.setRowSelectionAllowed(false);
        rhythmTable.setTableHeader(null);
        rhythmTable.setUpdateSelectionOnSort(false);
        rhythmTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rhythmTableMouseClicked(evt);
            }
        });
        patternScrollPane.setViewportView(rhythmTable);

        instrumentComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(misc.MidiInstrument.displayValues()));
        instrumentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrumentComboBoxActionPerformed(evt);
            }
        });

        drumPatternLabel.setText("Current drum pattern");

        beatLabel.setText("Beats");

        instrumentLabel.setText("Instrument");

        timeLabel.setText("Time");

        resolutionLabel.setText("Division");

        divisionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32" }));
        divisionComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                divisionComboBoxItemStateChanged(evt);
            }
        });
        divisionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divisionComboBoxActionPerformed(evt);
            }
        });

        timeSpinner.setValue(60);
        timeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                timeSpinnerStateChanged(evt);
            }
        });
        timeSpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeSpinnerMouseClicked(evt);
            }
        });

        sequenceTable.setTableHeader(null);
        sequenceTable.setShowGrid(true);
        sequenceTable.setColumnSelectionAllowed(false);
        sequenceTable.setRowSelectionAllowed(false);
        sequenceTable.setDefaultRenderer(Object.class, new CustomCellRenderer());
        rhythmTable.setDefaultEditor(Object.class, null);
        sequenceTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        sequenceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        sequenceTable.setAutoscrolls(false);
        sequenceTable.setGridColor(new java.awt.Color(0, 0, 0));
        sequenceTable.setName("sequenceTable"); // NOI18N
        sequenceTable.setOpaque(false);
        sequenceTable.setTableHeader(null);
        sequenceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sequenceTableMouseClicked(evt);
            }
        });
        sequenceScrollPane.setViewportView(sequenceTable);

        savePatternButton.setText("Save pattern");
        savePatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePatternButtonActionPerformed(evt);
            }
        });

        currentPatternComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentPatternComboBoxActionPerformed(evt);
            }
        });

        saveSequenceButton.setText("Save sequence");
        saveSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSequenceButtonActionPerformed(evt);
            }
        });

        selectPatternLabel.setText("Select pattern");

        numberOfBeats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        numberOfBeats.setSelectedIndex(3);
        numberOfBeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfBeatsActionPerformed(evt);
            }
        });

        leftHandLabel.setText("Left hand");

        rightHandLabel.setText("Right hand");

        leftFootLabel.setText("Left foot");

        rightFootLabel.setText("Right foot");

        bassGuitarLabel.setText("Bass guitar");

        playPatternButton.setText("Play pattern");
        playPatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPatternButtonActionPerformed(evt);
            }
        });

        playSequenceButton.setText("Play sequence");
        playSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSequenceButtonActionPerformed(evt);
            }
        });

        noteSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C", "C#/Db", "D", "D#/Eb", "E", "E#/F", "F#/Gb", "G", "G#/Ab", "A", "A#/Bb", "B", "B#/C" }));
        noteSelectComboBox.setEnabled(false);
        noteSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteSelectComboBoxActionPerformed(evt);
            }
        });

        noteLabel.setText("Note");

        octaveLabel.setText("Octave");

        octaveSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Contra", "Great", "Small", "1 Line", "2 Line", "3 Line", "4 Line", "5 Line", "6 Line" }));
        octaveSelectComboBox.setEnabled(false);
        octaveSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                octaveSelectComboBoxActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        fileMenuOpen.setText("Open rhythm");
        fileMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuOpenActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuOpen);

        fileMenuClose.setText("Close rhythm");
        fileMenuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuCloseActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuClose);

        fileMenuSave.setText("Save rhythm");
        fileMenu.add(fileMenuSave);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneSeparator)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playSequenceButton)
                        .addGap(58, 58, 58)
                        .addComponent(saveSequenceButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(leftHandLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rightHandLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(leftFootLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(54, 54, 54))
                            .addComponent(rightFootLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bassGuitarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patternScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 906, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drumPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sequenceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(instrumentLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(noteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(noteSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(octaveLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(octaveSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(instrumentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(beatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(numberOfBeats, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resolutionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(divisionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(selectPatternLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentPatternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66)
                .addComponent(playPatternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(savePatternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(leftHandLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rightHandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(leftFootLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rightFootLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bassGuitarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(patternScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(instrumentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(beatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(instrumentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(savePatternButton)
                                    .addComponent(playPatternButton)
                                    .addComponent(numberOfBeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(resolutionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(divisionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(selectPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(currentPatternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(octaveSelectComboBox)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(noteSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(noteLabel)
                        .addComponent(octaveLabel)))
                .addGap(18, 18, 18)
                .addComponent(paneSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playSequenceButton)
                    .addComponent(saveSequenceButton))
                .addGap(18, 18, 18)
                .addComponent(sequenceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(269, 269, 269))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuOpenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuOpenActionPerformed

    private void fileMenuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuCloseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuCloseActionPerformed

    private void rhythmTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rhythmTableMouseClicked
//        L_HAND	row 0
//        R_HAND	row 1
//        L_FOOT	row 2
//        R_FOOT	row 3
//        BASS          row 4
        
        int row = rhythmTable.getSelectedRow();
        int column = rhythmTable.getSelectedColumn();
        int index = instrumentComboBox.getSelectedIndex();
        currentEvent = new MidiEvent(index,currentNote,currentOctave);
       
        // validate if instruments are assigned to correct part of         
            switch (row) {
                // hands
                case 0:
                case 1:                
                    switch(currentEvent.getInstrument()){
                        case ACOUSTIC_BASS_DRUM:
                        case PEDAL_HI_HAT:  
                        case BASS_GUITAR: System.out.println("Wrong part of body");
                        return;
                    }   break;
                 // feet
                case 2:
                case 3:               
                    switch(currentEvent.getInstrument()){
                        case SIDE_STICK:
                        case ACOUSTIC_SNARE:
                        case COWBELL:
                        case LOW_FLOOR_TOM:
                        case HIGH_FLOOR_TOM:
                        case LOW_MID_TOM:
                        case HI_MID_TOM:
                        case HIGH_TOM:
                        case CLOSED_HI_HAT:
                        case OPEN_HI_HAT:
                        case CRASH_CYMBAL_1:
                        case RIDE_CYMBAL_2:
                        case SPLASH_CYMBAL:
                        case CHINESE_CYMBAL:
                        case BASS_GUITAR:   System.out.println("Wrong part of body");
                                            return;
                    }   
                    break;
                case 4: if(currentEvent.getInstrument() != MidiInstrument.BASS_GUITAR){
                            System.out.println("Wrong part of body");
                            return;
                        }
            }
              
       
         if(currentPatternData[row][column] == null || currentPatternData[row][column].equals(currentEvent))
            currentPatternData[row][column] = currentEvent;        
        else
            currentPatternData[row][column] = null; 
        
        String value = (String)rhythmTable.getValueAt(rhythmTable.getSelectedRow(), rhythmTable.getSelectedColumn());
        
        if(value == null)
            rhythmTable.setValueAt(" ", rhythmTable.getSelectedRow(), rhythmTable.getSelectedColumn());
        else
            rhythmTable.setValueAt(null, rhythmTable.getSelectedRow(), rhythmTable.getSelectedColumn());
       
        switch(evt.getButton()){
            case 1: System.out.println("Left");                    
                    break;
            case 3: System.out.println("Right");
            
        }
        
    }//GEN-LAST:event_rhythmTableMouseClicked

    private void savePatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePatternButtonActionPerformed
        Query query = em.createNamedQuery("Song.findAll");        
        Collection songs = query.getResultList();
        System.out.println(songs);
//        Pattern p = new Pattern();        
//        p.setBeats(1);
//        em.getTransaction().begin();
//        em.persist(p);        
//        em.getTransaction().commit();
    }//GEN-LAST:event_savePatternButtonActionPerformed

    private void saveSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSequenceButtonActionPerformed
        SequencePattern s = new SequencePattern();
        s.setPatternID(1);
        s.setSeqNum(1);
        
        em.getTransaction().begin();
        em.persist(s);
        em.getTransaction().commit();
    }//GEN-LAST:event_saveSequenceButtonActionPerformed

    private void sequenceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sequenceTableMouseClicked
        String value = (String)sequenceTable.getValueAt(sequenceTable.getSelectedRow(), sequenceTable.getSelectedColumn());
        if(value == null)
            sequenceTable.setValueAt("", sequenceTable.getSelectedRow(), sequenceTable.getSelectedColumn());
        else
            sequenceTable.setValueAt(null, sequenceTable.getSelectedRow(), sequenceTable.getSelectedColumn());
    }//GEN-LAST:event_sequenceTableMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void divisionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divisionComboBoxActionPerformed
        setRhythmTableModel();
        if(pattern != null)
            pattern.setTime(Integer.parseInt(timeSpinner.getValue().toString()),
                    Integer.parseInt(divisionComboBox.getSelectedItem().toString()),
                    Integer.parseInt(numberOfBeats.getSelectedItem().toString()));
    }//GEN-LAST:event_divisionComboBoxActionPerformed

    private void divisionComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_divisionComboBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_divisionComboBoxItemStateChanged

    private void playPatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playPatternButtonActionPerformed
        togglePlayback = !togglePlayback;
        
        if(togglePlayback == true){
            playPatternButton.setText("Stop");
            pattern = new Playback();
            pattern.setTime(Integer.parseInt(timeSpinner.getValue().toString()),
                    Integer.parseInt(divisionComboBox.getSelectedItem().toString()),
                    Integer.parseInt(numberOfBeats.getSelectedItem().toString()));
            pattern.start();
        }
        else{
            playPatternButton.setText("Play pattern");
            pattern.stopExecuting();
        }
    }//GEN-LAST:event_playPatternButtonActionPerformed

    private void playSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSequenceButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playSequenceButtonActionPerformed

    private void numberOfBeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfBeatsActionPerformed
        setRhythmTableModel();
        if(pattern != null)
            pattern.setTime(Integer.parseInt(timeSpinner.getValue().toString()),
                    Integer.parseInt(divisionComboBox.getSelectedItem().toString()),
                    Integer.parseInt(numberOfBeats.getSelectedItem().toString()));
    }//GEN-LAST:event_numberOfBeatsActionPerformed

    private void instrumentComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instrumentComboBoxActionPerformed
        int index = instrumentComboBox.getSelectedIndex();
        currentEvent = new MidiEvent(index, currentNote, currentOctave);
        if(currentEvent.getInstrument() != MidiInstrument.BASS_GUITAR){
            this.noteSelectComboBox.setEnabled(false);
            this.octaveSelectComboBox.setEnabled(false);
        }
        else{
            this.noteSelectComboBox.setEnabled(true);
            this.octaveSelectComboBox.setEnabled(true);
        }
    }//GEN-LAST:event_instrumentComboBoxActionPerformed

    private void currentPatternComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentPatternComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentPatternComboBoxActionPerformed

    private void timeSpinnerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeSpinnerMouseClicked
        
    }//GEN-LAST:event_timeSpinnerMouseClicked

    private void timeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_timeSpinnerStateChanged
        if(pattern != null)
            pattern.setTime(Integer.parseInt(timeSpinner.getValue().toString()),
                    Integer.parseInt(divisionComboBox.getSelectedItem().toString()),
                    Integer.parseInt(numberOfBeats.getSelectedItem().toString()));
    }//GEN-LAST:event_timeSpinnerStateChanged

    private void noteSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteSelectComboBoxActionPerformed
        currentNote = noteSelectComboBox.getSelectedIndex(); 
    }//GEN-LAST:event_noteSelectComboBoxActionPerformed

    private void octaveSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_octaveSelectComboBoxActionPerformed
        currentOctave = octaveSelectComboBox.getSelectedIndex();
    }//GEN-LAST:event_octaveSelectComboBoxActionPerformed

    private void setRhythmTableModel(){
        int division = Integer.parseInt(divisionComboBox.getSelectedItem().toString());
        int beats = Integer.parseInt(numberOfBeats.getSelectedItem().toString());
        int cols = division * beats;
        if(cols > 32){
            cols = 32;
            beats = 32;
            division = 1;
            divisionComboBox.setSelectedIndex(0);
        }
        rhythmTable.setModel(new javax.swing.table.DefaultTableModel(5,cols ));
        currentPatternData[0] = new MidiEvent[cols];
        currentPatternData[1] = new MidiEvent[cols];
        currentPatternData[2] = new MidiEvent[cols];
        currentPatternData[3] = new MidiEvent[cols];
        currentPatternData[4] = new MidiEvent[cols];
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
            
        });
        
        
        
    }
    
    // window closing handler
        WindowListener wl = new WindowAdapter(){
            public void windowClosing(WindowEvent e){
                em.close();
                emf.close();
                UsbWriter.deInit();
            }
        };
        
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bassGuitarLabel;
    private javax.swing.JLabel beatLabel;
    private javax.swing.JComboBox<String> currentPatternComboBox;
    private javax.swing.JComboBox<String> divisionComboBox;
    private javax.swing.JLabel drumPatternLabel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenuClose;
    private javax.swing.JMenuItem fileMenuOpen;
    private javax.swing.JMenuItem fileMenuSave;
    private javax.swing.JComboBox<String> instrumentComboBox;
    private javax.swing.JLabel instrumentLabel;
    private javax.swing.JLabel leftFootLabel;
    private javax.swing.JLabel leftHandLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JComboBox<String> noteSelectComboBox;
    private javax.swing.JComboBox<String> numberOfBeats;
    private javax.swing.JLabel octaveLabel;
    private javax.swing.JComboBox<String> octaveSelectComboBox;
    private javax.swing.JSeparator paneSeparator;
    private javax.swing.JScrollPane patternScrollPane;
    private javax.swing.JButton playPatternButton;
    private javax.swing.JButton playSequenceButton;
    private javax.swing.JLabel resolutionLabel;
    private javax.swing.JTable rhythmTable;
    private javax.swing.JLabel rightFootLabel;
    private javax.swing.JLabel rightHandLabel;
    private javax.swing.JButton savePatternButton;
    private javax.swing.JButton saveSequenceButton;
    private javax.swing.JLabel selectPatternLabel;
    private javax.swing.JScrollPane sequenceScrollPane;
    private javax.swing.JTable sequenceTable;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JSpinner timeSpinner;
    // End of variables declaration//GEN-END:variables
}

class CustomCellRenderer extends DefaultTableCellRenderer {
  @Override
  public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column) {
    
    Component c = super.getTableCellRendererComponent(table,value,isSelected, hasFocus,row, column);
    
    if(table.getName().equals("patternTable")){
        if( MainFrame.currentPatternData[row][column] != null){
            switch((MidiInstrument)MainFrame.currentPatternData[row][column].getInstrument()){
                case ACOUSTIC_BASS_DRUM:  c.setBackground(Color.red); break;
                case SIDE_STICK:          c.setBackground(Color.yellow); break;
                case ACOUSTIC_SNARE:      c.setBackground(Color.blue); break;
                case COWBELL:             c.setBackground(Color.green); break;
                case LOW_FLOOR_TOM:       c.setBackground(Color.black); break;
                case HIGH_FLOOR_TOM:      c.setBackground(Color.white); break;
                case LOW_MID_TOM:         c.setBackground(Color.darkGray); break;
                case HI_MID_TOM:          c.setBackground(Color.orange); break;
                case HIGH_TOM:            c.setBackground(Color.cyan); break;
                case CLOSED_HI_HAT:       c.setBackground(Color.pink); break;
                case OPEN_HI_HAT:         c.setBackground(Color.gray); break;
                case PEDAL_HI_HAT:        c.setBackground(Color.magenta); break;
                case CRASH_CYMBAL_1:      c.setBackground(Color.decode("113355")); break;
                case RIDE_CYMBAL_2:       c.setBackground(Color.decode("553355")); break;
                case SPLASH_CYMBAL:       c.setBackground(Color.decode("116655")); break;
                case CHINESE_CYMBAL:      c.setBackground(Color.decode("003355")); break;
                case BASS_GUITAR:         c.setBackground(Color.decode("002211"));   
            }                
        }
        
        else c.setBackground(table.getBackground());
    }
    
        else if(table.getName().equals("sequenceTable")){
            
        }
    
            
//    else {
//            String val = (String)table.getValueAt(row, column);
//            if(!"@".equals(val)){
//              c.setBackground(table.getBackground());
//              table.setValueAt("", row, column);
//          }
//    }
    
    return c;
  }
}
