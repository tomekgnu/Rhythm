/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rhythm;

import model.Pattern;
import model.PatternSequence;
import model.MidiEvent;
import model.MidiInstrument;
import misc.UsbWriter;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import static java.awt.event.MouseEvent.BUTTON1;
import static java.awt.event.MouseEvent.BUTTON3;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTable;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableCellRenderer;
import misc.ComboBoxRenderer;

/**
 *
 * @author Tomek
 */
public class MainFrame extends javax.swing.JFrame {
    private final boolean usbResult;
    public static PatternSequence currentSequence;
    public static Pattern currentPattern;
    private List<Pattern> patternList;
    private MidiEvent currentEvent;
    private int currentNote;
    private int currentOctave;
    private boolean togglePlayback;
    private Playback patternPlayback;
    private Playback sequencePlayback;
    private RhythmFileWriter rhythmFileWriter;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {        
        initComponents();
        usbResult = UsbWriter.init("COM4","Rhythm");
        currentSequence = new PatternSequence();
        patternList = new ArrayList();
        setRhythmTableModel();
        togglePlayback  = false;
        currentNote =  0; // 24 = C contra
        currentOctave = 0;
        rhythmFileWriter = new RhythmFileWriter(new File("plik.bin"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        insertPatternPopup = new javax.swing.JPopupMenu();
        choosePattern = new javax.swing.JMenuItem();
        removePattern = new javax.swing.JMenuItem();
        insertOneBefore = new javax.swing.JMenuItem();
        insertOneAfter = new javax.swing.JMenuItem();
        patternScrollPane = new javax.swing.JScrollPane();
        patternTable = new JPatternTable();
        instrumentComboBox = new javax.swing.JComboBox<>();
        drumPatternLabel = new javax.swing.JLabel();
        beatLabel = new javax.swing.JLabel();
        instrumentLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        resolutionLabel = new javax.swing.JLabel();
        divisionComboBox = new javax.swing.JComboBox<>();
        timeSpinner = new javax.swing.JSpinner();
        paneSeparator = new javax.swing.JSeparator();
        sequenceScrollPane = new javax.swing.JScrollPane();
        sequenceTable = new JSequenceTable();
        savePatternButton = new javax.swing.JButton();
        selectPatternComboBox = new JPatternComboBox();
        saveSequenceButton = new javax.swing.JButton();
        selectPatternLabel = new javax.swing.JLabel();
        numberOfBeats = new javax.swing.JComboBox<>();
        leftHandLabel = new javax.swing.JLabel();
        rightHandLabel = new javax.swing.JLabel();
        leftFootLabel = new javax.swing.JLabel();
        rightFootLabel = new javax.swing.JLabel();
        bassGuitarLabel = new javax.swing.JLabel();
        playPatternButton = new javax.swing.JButton();
        playSequenceButton = new javax.swing.JButton();
        noteSelectComboBox = new javax.swing.JComboBox<>();
        noteLabel = new javax.swing.JLabel();
        octaveLabel = new javax.swing.JLabel();
        octaveSelectComboBox = new javax.swing.JComboBox<>();
        saveFileButton = new javax.swing.JButton();
        selectSequencePatternComboBox = new JPatternComboBox();
        repeatPatternSpinner = new javax.swing.JSpinner();
        setPatternButton = new javax.swing.JButton();
        testTransfer = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenuOpen = new javax.swing.JMenuItem();
        fileMenuAdd = new javax.swing.JMenuItem();
        fileMenuClose = new javax.swing.JMenuItem();
        fileMenuSave = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        choosePattern.setText("Choose pattern");
        choosePattern.setActionCommand("choosePattern");
        choosePattern.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                choosePatternMouseClicked(evt);
            }
        });
        choosePattern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosePatternActionPerformed(evt);
            }
        });
        insertPatternPopup.add(choosePattern);

        removePattern.setText("Clear pattern");
        removePattern.setActionCommand("removePattern");
        removePattern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePatternActionPerformed(evt);
            }
        });
        insertPatternPopup.add(removePattern);

        insertOneBefore.setText("Insert empty before");
        insertOneBefore.setActionCommand("insertPatternBefore");
        insertOneBefore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertOneBeforeActionPerformed(evt);
            }
        });
        insertPatternPopup.add(insertOneBefore);

        insertOneAfter.setText("Insert empty after");
        insertOneAfter.setActionCommand("insertOneAfter");
        insertOneAfter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertOneAfterActionPerformed(evt);
            }
        });
        insertPatternPopup.add(insertOneAfter);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(0, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        patternScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        patternTable.setShowGrid(true);
        patternTable.setDragEnabled(true);
        patternTable.setDefaultEditor(Object.class, null);
        patternTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        patternTable.setTableHeader(null);
        patternTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        patternTable.setDefaultRenderer(Object.class, new CustomCellRenderer());
        patternTable.setGridColor(new java.awt.Color(0, 0, 0));
        patternTable.setName("patternTable"); // NOI18N
        patternTable.setOpaque(false);
        patternTable.setRequestFocusEnabled(false);
        patternTable.setRowHeight(20);
        patternTable.setColumnSelectionAllowed(false);
        patternTable.setCellSelectionEnabled(false);
        patternTable.setShowHorizontalLines(true);
        patternTable.setShowVerticalLines(true);
        patternTable.setRowSelectionAllowed(false);
        patternTable.setUpdateSelectionOnSort(false);
        patternTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patternTableMouseClicked(evt);
            }
        });
        patternTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                patternTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patternTableKeyReleased(evt);
            }
        });
        patternScrollPane.setViewportView(patternTable);

        instrumentComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(model.MidiInstrument.displayValues()));
        instrumentComboBox.setOpaque(false);
        instrumentComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                instrumentComboBoxItemStateChanged(evt);
            }
        });
        instrumentComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                instrumentComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                instrumentComboBoxPopupMenuWillBecomeVisible(evt);
            }
        });
        instrumentComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                instrumentComboBoxMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                instrumentComboBoxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                instrumentComboBoxMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                instrumentComboBoxMouseReleased(evt);
            }
        });
        instrumentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrumentComboBoxActionPerformed(evt);
            }
        });

        drumPatternLabel.setText("Current drum pattern");

        beatLabel.setText("Beats");

        instrumentLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        instrumentLabel.setText("Instrument");
        instrumentLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        instrumentLabel.setOpaque(true);

        timeLabel.setText("Time");

        resolutionLabel.setText("Division");

        divisionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32" }));
        divisionComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                divisionComboBoxItemStateChanged(evt);
            }
        });
        divisionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divisionComboBoxActionPerformed(evt);
            }
        });

        timeSpinner.setValue(60);
        timeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                timeSpinnerStateChanged(evt);
            }
        });
        timeSpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeSpinnerMouseClicked(evt);
            }
        });

        sequenceTable.setTableHeader(null);
        sequenceTable.setShowGrid(true);
        sequenceTable.setColumnSelectionAllowed(false);
        sequenceTable.setRowSelectionAllowed(false);
        sequenceTable.setRequestFocusEnabled(false);
        sequenceTable.setCellSelectionEnabled(false);
        sequenceTable.setDefaultRenderer(Object.class, new CustomCellRenderer());
        sequenceTable.setDefaultEditor(Object.class, null);
        sequenceTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        sequenceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        sequenceTable.setAutoscrolls(false);
        sequenceTable.setFocusable(false);
        sequenceTable.setGridColor(new java.awt.Color(0, 0, 0));
        sequenceTable.setName("sequenceTable"); // NOI18N
        sequenceTable.setOpaque(false);
        sequenceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sequenceTableMouseClicked(evt);
            }
        });
        sequenceScrollPane.setViewportView(sequenceTable);

        savePatternButton.setText("Save pattern");
        savePatternButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                savePatternButtonMouseClicked(evt);
            }
        });
        savePatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePatternButtonActionPerformed(evt);
            }
        });

        selectPatternComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "New" }));
        selectPatternComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectPatternComboBoxItemStateChanged(evt);
            }
        });
        selectPatternComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectPatternComboBoxMouseClicked(evt);
            }
        });
        selectPatternComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPatternComboBoxActionPerformed(evt);
            }
        });

        saveSequenceButton.setText("Save sequence");
        saveSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSequenceButtonActionPerformed(evt);
            }
        });

        selectPatternLabel.setText("Select pattern");

        numberOfBeats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        numberOfBeats.setSelectedIndex(3);
        numberOfBeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfBeatsActionPerformed(evt);
            }
        });

        leftHandLabel.setText("Left hand");

        rightHandLabel.setText("Right hand");

        leftFootLabel.setText("Left foot");

        rightFootLabel.setText("Right foot");

        bassGuitarLabel.setText("Bass guitar");

        playPatternButton.setText("Play pattern");
        playPatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPatternButtonActionPerformed(evt);
            }
        });

        playSequenceButton.setText("Play sequence");
        playSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSequenceButtonActionPerformed(evt);
            }
        });

        noteSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C", "C#/Db", "D", "D#/Eb", "E", "E#/F", "F#/Gb", "G", "G#/Ab", "A", "A#/Bb", "B", "B#/C" }));
        noteSelectComboBox.setEnabled(false);
        noteSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteSelectComboBoxActionPerformed(evt);
            }
        });

        noteLabel.setText("Note");

        octaveLabel.setText("Octave");

        octaveSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Contra", "Great", "Small", "1 Line", "2 Line", "3 Line", "4 Line", "5 Line", "6 Line" }));
        octaveSelectComboBox.setEnabled(false);
        octaveSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                octaveSelectComboBoxActionPerformed(evt);
            }
        });

        saveFileButton.setText("Save file");
        saveFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileButtonActionPerformed(evt);
            }
        });

        selectSequencePatternComboBox.setEnabled(false);
        selectSequencePatternComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectSequencePatternComboBoxItemStateChanged(evt);
            }
        });
        selectSequencePatternComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectSequencePatternComboBoxMouseClicked(evt);
            }
        });
        selectSequencePatternComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSequencePatternComboBoxActionPerformed(evt);
            }
        });

        repeatPatternSpinner.setEnabled(false);
        repeatPatternSpinner.setValue(1);
        repeatPatternSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                repeatPatternSpinnerStateChanged(evt);
            }
        });

        setPatternButton.setText("OK");
        setPatternButton.setEnabled(false);
        setPatternButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setPatternButtonMouseClicked(evt);
            }
        });
        setPatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPatternButtonActionPerformed(evt);
            }
        });

        testTransfer.setText("Test");
        testTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testTransferActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        fileMenuOpen.setText("Open rhythm");
        fileMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuOpenActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuOpen);

        fileMenuAdd.setText("Add rhythm");
        fileMenuAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuAddActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuAdd);

        fileMenuClose.setText("Close rhythm");
        fileMenuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuCloseActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuClose);

        fileMenuSave.setText("Save rhythm");
        fileMenu.add(fileMenuSave);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneSeparator)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leftHandLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightHandLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftFootLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(54, 54, 54))
                    .addComponent(rightFootLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bassGuitarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(patternScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 864, Short.MAX_VALUE)
                .addGap(49, 49, 49))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(887, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(noteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(noteSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(octaveLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(octaveSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(instrumentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(beatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numberOfBeats, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(resolutionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(divisionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(3, 3, 3)
                        .addComponent(selectPatternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(playPatternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(savePatternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(instrumentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(410, 410, 410))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(sequenceScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(playSequenceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(saveSequenceButton)
                                .addGap(18, 18, 18)
                                .addComponent(saveFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(selectSequencePatternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(repeatPatternSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(setPatternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(testTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(leftHandLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightHandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leftFootLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightFootLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bassGuitarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patternScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(instrumentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(selectPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numberOfBeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resolutionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(divisionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(beatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(instrumentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectPatternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playPatternButton)
                            .addComponent(savePatternButton))))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noteSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noteLabel)
                    .addComponent(octaveLabel)
                    .addComponent(octaveSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(paneSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playSequenceButton)
                    .addComponent(saveSequenceButton)
                    .addComponent(saveFileButton)
                    .addComponent(testTransfer))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sequenceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(selectSequencePatternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(repeatPatternSpinner)
                        .addComponent(setPatternButton)))
                .addContainerGap(365, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuOpenActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "RTH files", "bin", "rth");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File currentFile = chooser.getSelectedFile();
            rhythmFileWriter.setFile(currentFile);
            patternList.clear();
            currentSequence.getPatternList().clear();
            rhythmFileWriter.readSequence(currentSequence);
            currentPattern = currentSequence.getPatternAt(0);
            setRhythmTableModel(currentPattern);             
            patternTable.repaint();
            
            // fill in pattern select box and sequence table            
            for(int index = 0; index < currentSequence.getPatternList().size(); index++){
                patternList.add(index,(Pattern)currentSequence.getPatternList().get(index));
                int x = index / sequenceTable.getColumnCount(); // row
                int y = index % sequenceTable.getColumnCount(); // column        
                ((JSequenceTable)sequenceTable).insertPattern();
            }
            String[] array = new String[patternList.size() + 1];
            for (int i = 0; i < patternList.size(); i++) {
                array[i] = patternList.get(i).toString();
            }
            array[patternList.size()] = "New";
            selectPatternComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(array));
            
            // pattern list without New item
            String[] patterns = new String[patternList.size()];        
            for (int i = 0; i < patternList.size(); i++) {
                patterns[i] = patternList.get(i).toString();
            }
            selectSequencePatternComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(patterns));
        }
    }//GEN-LAST:event_fileMenuOpenActionPerformed

    private void fileMenuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuCloseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuCloseActionPerformed
    
    private void patternTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patternTableMouseClicked
//        L_HAND	row 0
//        R_HAND	row 1
//        L_FOOT	row 2
//        R_FOOT	row 3
//        BASS          row 4
        
        int row = patternTable.getSelectedRow();
        int column = patternTable.getSelectedColumn();
        int index = instrumentComboBox.getSelectedIndex();
        int rowCount = patternTable.getRowCount();
        int listIndex = column * rowCount + row;        
        currentEvent = new MidiEvent(index,row,column,currentNote,currentOctave);
        
        // validate if instruments are assigned to correct part of         
            switch (row) {
                // hands
                case 0:
                case 1:                
                    switch(currentEvent.getMidiInstrument()){
                        case ACOUSTIC_BASS_DRUM:
                        case PEDAL_HI_HAT:  
                        case BASS_GUITAR: System.out.println("Wrong part of body");
                        return;
                    }   break;
                 // feet
                case 2:
                case 3:               
                    switch(currentEvent.getMidiInstrument()){
                        case SIDE_STICK:
                        case ACOUSTIC_SNARE:
                        case COWBELL:
                        case LOW_FLOOR_TOM:
                        case HIGH_FLOOR_TOM:
                        case LOW_MID_TOM:
                        case HI_MID_TOM:
                        case HIGH_TOM:
                        case CLOSED_HI_HAT:
                        case OPEN_HI_HAT:
                        case CRASH_CYMBAL_1:
                        case RIDE_CYMBAL_2:
                        case SPLASH_CYMBAL:
                        case CHINESE_CYMBAL:
                        case BASS_GUITAR:   System.out.println("Wrong part of body");
                                            return;
                    }   
                    break;
                case 4: if(currentEvent.getMidiInstrument() != MidiInstrument.BASS_GUITAR){
                            System.out.println("Wrong part of body");
                            return;
                        }
            }
              
        
        assert(currentPattern.hasEvents());
        MidiInstrument instrument = currentPattern.getEventAt(listIndex).getMidiInstrument();
         if(instrument == MidiInstrument.NONE)// || currentPatternData[row][column].equals(currentEvent))
            currentPattern.addEvent(listIndex, currentEvent);       
        else
           currentPattern.addEvent(listIndex, new MidiEvent()); 
             
        
        String value = (String)patternTable.getValueAt(patternTable.getSelectedRow(), patternTable.getSelectedColumn());
        
        if(value == null){
           patternTable.setValueAt(" ", patternTable.getSelectedRow(), patternTable.getSelectedColumn());
           
        }
        else{
            patternTable.setValueAt(null, patternTable.getSelectedRow(), patternTable.getSelectedColumn());
        }
                        
    }//GEN-LAST:event_patternTableMouseClicked

    private void savePatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePatternButtonActionPerformed
        
    }//GEN-LAST:event_savePatternButtonActionPerformed

    private void saveSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSequenceButtonActionPerformed
//        Query query = em.createNamedQuery("Song.findAll");        
//        Collection songs = query.getResultList();
//        System.out.println(songs);
//        Pattern p = new Pattern();
//        int beatTime = 60000 / Integer.parseInt(timeSpinner.getValue().toString());
//        int beats = Integer.parseInt(numberOfBeats.getSelectedItem().toString());
//        int div = Integer.parseInt(divisionComboBox.getSelectedItem().toString());
//        int subBeats = beats * div;
//        int barDuration = beats * beatTime;
//        p.setBeats(subBeats);
//        p.setBeatTime(barDuration);
//        PatternSequence sequence = new PatternSequence();
//        em.getTransaction().begin();
//        em.persist(p);
//        List patterns = new ArrayList();
//        patterns.add(p);
//        sequence.setPatternList(patterns); 
//        em.persist(sequence); 
//        em.getTransaction().commit();
        //new Controller(em).savePattern(p);
    }//GEN-LAST:event_saveSequenceButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void divisionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divisionComboBoxActionPerformed
        Pattern tmp = currentPattern;
        setRhythmTableModel();
        currentPattern.setID(tmp.getID());
        if(patternPlayback != null)
            patternPlayback.setTime(Integer.parseInt(timeSpinner.getValue().toString()),
                    Integer.parseInt(divisionComboBox.getSelectedItem().toString()),
                    Integer.parseInt(numberOfBeats.getSelectedItem().toString()));
            
    }//GEN-LAST:event_divisionComboBoxActionPerformed

    private void divisionComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_divisionComboBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_divisionComboBoxItemStateChanged

    private void playPatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playPatternButtonActionPerformed
        if(sequencePlayback != null){
            sequencePlayback.stopExecuting();
            playSequenceButton.setText("Play sequence");
        }
        togglePlayback = !togglePlayback;
        
        if(togglePlayback == true){
            playPatternButton.setText("Stop");
            patternPlayback = new Playback(Playback.PATTERN);
            currentPattern.setBeatTime(Integer.parseInt(timeSpinner.getValue().toString()));
            currentPattern.setDivision(Integer.parseInt(divisionComboBox.getSelectedItem().toString()));
            currentPattern.setBeats(Integer.parseInt(numberOfBeats.getSelectedItem().toString()));
            patternPlayback.start();
        }
        else{
            playPatternButton.setText("Play pattern");
            patternPlayback.stopExecuting();
        }
    }//GEN-LAST:event_playPatternButtonActionPerformed

    private void playSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSequenceButtonActionPerformed
        if(patternPlayback != null){
            patternPlayback.stopExecuting();
            playPatternButton.setText("Play pattern");
        }
           
        togglePlayback = !togglePlayback;
        
        if(togglePlayback == true){
            playSequenceButton.setText("Stop");
            patternPlayback = new Playback(Playback.SEQUENCE);
            currentPattern.setBeatTime(Integer.parseInt(timeSpinner.getValue().toString()));
            currentPattern.setDivision(Integer.parseInt(divisionComboBox.getSelectedItem().toString()));
            currentPattern.setBeats(Integer.parseInt(numberOfBeats.getSelectedItem().toString()));
            patternPlayback.start();
        }
        else{
            playSequenceButton.setText("Play pattern");
            patternPlayback.stopExecuting();
        }
    }//GEN-LAST:event_playSequenceButtonActionPerformed

    private void numberOfBeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfBeatsActionPerformed
        Pattern tmp = currentPattern;
        setRhythmTableModel();
        currentPattern.setID(tmp.getID());
        if(patternPlayback != null)
            patternPlayback.setTime(Integer.parseInt(timeSpinner.getValue().toString()),
                    Integer.parseInt(divisionComboBox.getSelectedItem().toString()),
                    Integer.parseInt(numberOfBeats.getSelectedItem().toString()));
    }//GEN-LAST:event_numberOfBeatsActionPerformed

    private void instrumentComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instrumentComboBoxActionPerformed
       
        MidiInstrument instrument = MidiInstrument.getInstrumentByIndex(instrumentComboBox.getSelectedIndex());
        instrumentLabel.setBackground(instrument.getBackground());
        instrumentLabel.setForeground(instrument.getForeground());
        instrumentLabel.setOpaque(true);
        
        if(instrument != MidiInstrument.BASS_GUITAR){
            this.noteSelectComboBox.setEnabled(false);
            this.octaveSelectComboBox.setEnabled(false);
        }
        else{
            this.noteSelectComboBox.setEnabled(true);
            this.octaveSelectComboBox.setEnabled(true);
        }       
        
    }//GEN-LAST:event_instrumentComboBoxActionPerformed

    private void selectPatternComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPatternComboBoxActionPerformed
        int index = selectPatternComboBox.getSelectedIndex();         
        if(selectPatternComboBox.getSelectedItem().toString().equals("New")){
            index = selectPatternComboBox.getSelectedIndex();            
            setRhythmTableModel(); 
        }
        
        try{
            Pattern tmp = patternList.get(index);
            Integer beats = tmp.getBeats();
            Integer division = tmp.getDivision();
            Integer duration = tmp.getBeatTime();
            divisionComboBox.setSelectedItem(division.toString());
            timeSpinner.setValue(duration);
            numberOfBeats.setSelectedItem(beats.toString());
            patternTable.setModel(new javax.swing.table.DefaultTableModel(5,beats * division ));
            currentPattern = tmp;
        }catch(IndexOutOfBoundsException ex){
            System.out.println("selectPatternComboBoxActionPerformed " + ex.getMessage());
        //setRhythmTableModel();

        patternTable.repaint();                    

        }
    }//GEN-LAST:event_selectPatternComboBoxActionPerformed

    private void timeSpinnerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeSpinnerMouseClicked
        
    }//GEN-LAST:event_timeSpinnerMouseClicked

    private void timeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_timeSpinnerStateChanged
        currentPattern.setBeatTime(Integer.parseInt(timeSpinner.getValue().toString()));
        currentPattern.setDivision(Integer.parseInt(divisionComboBox.getSelectedItem().toString()));
        currentPattern.setBeats(Integer.parseInt(numberOfBeats.getSelectedItem().toString()));
    }//GEN-LAST:event_timeSpinnerStateChanged

    private void noteSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteSelectComboBoxActionPerformed
        currentNote = noteSelectComboBox.getSelectedIndex(); 
    }//GEN-LAST:event_noteSelectComboBoxActionPerformed

    private void octaveSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_octaveSelectComboBoxActionPerformed
        currentOctave = octaveSelectComboBox.getSelectedIndex();
    }//GEN-LAST:event_octaveSelectComboBoxActionPerformed

    private void instrumentComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_instrumentComboBoxItemStateChanged
        
    }//GEN-LAST:event_instrumentComboBoxItemStateChanged

    private void instrumentComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instrumentComboBoxMouseClicked
       
    }//GEN-LAST:event_instrumentComboBoxMouseClicked

    private void instrumentComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instrumentComboBoxMouseEntered
        
    }//GEN-LAST:event_instrumentComboBoxMouseEntered

    private void instrumentComboBoxMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instrumentComboBoxMouseReleased
        instrumentComboBox.setRenderer(new DefaultListCellRenderer());
    }//GEN-LAST:event_instrumentComboBoxMouseReleased

    private void instrumentComboBoxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instrumentComboBoxMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_instrumentComboBoxMouseExited

    private void instrumentComboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_instrumentComboBoxPopupMenuWillBecomeVisible
        instrumentComboBox.setRenderer(new ComboBoxRenderer());
    }//GEN-LAST:event_instrumentComboBoxPopupMenuWillBecomeVisible

    private void instrumentComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_instrumentComboBoxPopupMenuWillBecomeInvisible
        instrumentComboBox.setRenderer(new DefaultListCellRenderer());    
        
    }//GEN-LAST:event_instrumentComboBoxPopupMenuWillBecomeInvisible

    private void sequenceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sequenceTableMouseClicked
       Point pnt = evt.getPoint();
       int row = sequenceTable.rowAtPoint(pnt);
       int col = sequenceTable.columnAtPoint(pnt);
       int columns = sequenceTable.getColumnCount();
       int totalPatterns = ((JSequenceTable)sequenceTable).getTotalPatterns();
       int index = row * columns + col;
       Pattern p = null;
       if(index > ((JSequenceTable)sequenceTable).getTotalPatterns() || patternList.isEmpty()){
            System.out.println(index + " " + totalPatterns);
            return;
       }
       ((JSequenceTable)sequenceTable).setListIndex(index);
       ((JSequenceTable)sequenceTable).setCurrentRow(row);
       ((JSequenceTable)sequenceTable).setCurrentColumn(col);
       
       try{
            p = currentSequence.getPatternAt(index);
        }catch(IndexOutOfBoundsException ex){
            System.out.println("Index does not exist: " + index);  
       } 
       
       switch(evt.getButton()){ 
            case BUTTON1:   
                            if(p == null)
                                return;
                            p = currentSequence.getPatternAt(index);           
                            selectSequencePatternComboBox.setSelectedIndex(p.getID());
                            ((JSequenceTable)sequenceTable).setListIndex(index);
                            repeatPatternSpinner.setValue(p.getRepeat());
                            break;
            case BUTTON3:   int x = pnt.x;
                            int y = pnt.y;
                            insertPatternPopup.show(sequenceTable,x,y);
                            break; 
            }
       
               
       
    }//GEN-LAST:event_sequenceTableMouseClicked
    // add pattern to temporary internal list
    private void savePatternButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_savePatternButtonMouseClicked
       int index = selectPatternComboBox.getSelectedIndex();
       
        try{
            currentPattern.setBeatTime(Integer.parseInt(timeSpinner.getValue().toString()));
            currentPattern.setBeats(Integer.parseInt(numberOfBeats.getSelectedItem().toString()));
            currentPattern.setDivision(Integer.parseInt(divisionComboBox.getSelectedItem().toString()));
            patternList.set(index,currentPattern);
        }
        catch(IndexOutOfBoundsException ex){
            System.out.println("savePatternButtonMouseClicked " + ex.getMessage());
            currentPattern.incrementID();
            patternList.add(index,currentPattern);
            
        } 
        
        // pattern list with New item
        String[] array = new String[patternList.size() + 1];        
        for (int i = 0; i < patternList.size(); i++) {
            array[i] = patternList.get(i).toString();
        }
        array[patternList.size()] = "New";
        selectPatternComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(array));  
        ((JPatternComboBox)selectPatternComboBox).setSelection(index);        
        
        // pattern list without New item
        String[] patterns = new String[patternList.size()];        
        for (int i = 0; i < patternList.size(); i++) {
            patterns[i] = patternList.get(i).toString();
        }
        selectSequencePatternComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(patterns));
    }//GEN-LAST:event_savePatternButtonMouseClicked

    private void patternTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patternTableKeyPressed
        
    }//GEN-LAST:event_patternTableKeyPressed

    private void patternTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patternTableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_patternTableKeyReleased

    private void selectPatternComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectPatternComboBoxMouseClicked
        
    }//GEN-LAST:event_selectPatternComboBoxMouseClicked

    private void selectPatternComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectPatternComboBoxItemStateChanged
              
    }//GEN-LAST:event_selectPatternComboBoxItemStateChanged

    private void saveFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileButtonActionPerformed
        rhythmFileWriter.writeSequence(currentSequence);
    }//GEN-LAST:event_saveFileButtonActionPerformed

    private void fileMenuAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuAddActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "RTH files", "bin", "rth");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File currentFile = chooser.getSelectedFile();
            rhythmFileWriter.setFile(currentFile);
            PatternSequence tmpseq = new PatternSequence();
            rhythmFileWriter.readSequence(tmpseq);
            currentSequence.getPatternList().addAll(tmpseq.getPatternList());
            currentPattern = currentSequence.getPatternAt(0);
            setRhythmTableModel(currentPattern);             
            patternTable.repaint();
        }
    }//GEN-LAST:event_fileMenuAddActionPerformed

    private void selectSequencePatternComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectSequencePatternComboBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_selectSequencePatternComboBoxItemStateChanged

    private void selectSequencePatternComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectSequencePatternComboBoxMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_selectSequencePatternComboBoxMouseClicked

    private void selectSequencePatternComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSequencePatternComboBoxActionPerformed
        int index = selectSequencePatternComboBox.getSelectedIndex();
        
    }//GEN-LAST:event_selectSequencePatternComboBoxActionPerformed

    private void repeatPatternSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_repeatPatternSpinnerStateChanged
        int val = Integer.parseInt(repeatPatternSpinner.getValue().toString());
        if(val < 1)
            repeatPatternSpinner.setValue(1);
    }//GEN-LAST:event_repeatPatternSpinnerStateChanged

    private void setPatternButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setPatternButtonMouseClicked
//        try{
//            currentSequence.insertPattern(patternIndex, currentPattern);
//        }
//        catch(IndexOutOfBoundsException ex){
//            System.out.println("savePatternButtonMouseClicked " + ex.getMessage());
//            currentSequence.addPattern(patternIndex, currentPattern);
//        }
//        
//        ((JPatternComboBox)selectPatternComboBox).setSelection(patternIndex);
//        
//        int x = patternIndex / sequenceTable.getColumnCount(); // row
//        int y = patternIndex % sequenceTable.getColumnCount(); // column
//        
//        sequenceTable.setValueAt(patternIndex, x, y);
    }//GEN-LAST:event_setPatternButtonMouseClicked

    private void insertOneBeforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertOneBeforeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_insertOneBeforeActionPerformed

    private void insertOneAfterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertOneAfterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_insertOneAfterActionPerformed

    private void choosePatternMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choosePatternMouseClicked
        
        
    }//GEN-LAST:event_choosePatternMouseClicked

    private void setPatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPatternButtonActionPerformed
        int patternIndex = selectSequencePatternComboBox.getSelectedIndex();
        int sequenceIndex = ((JSequenceTable)sequenceTable).getListIndex();
        try {
            Pattern cloned = (Pattern) patternList.get(patternIndex).copy();
            cloned.setRepeat(Integer.parseInt(repeatPatternSpinner.getValue().toString()));
            currentSequence.addPattern(sequenceIndex, cloned);
        } catch (NumberFormatException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
               
        ((JSequenceTable)sequenceTable).insertPattern();        
        selectSequencePatternComboBox.setEnabled(false);
        repeatPatternSpinner.setEnabled(false);
        setPatternButton.setEnabled(false);
    }//GEN-LAST:event_setPatternButtonActionPerformed

    private void choosePatternActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosePatternActionPerformed
        selectSequencePatternComboBox.setEnabled(true);
        repeatPatternSpinner.setEnabled(true);
        repeatPatternSpinner.setValue(1);
        setPatternButton.setEnabled(true);
    }//GEN-LAST:event_choosePatternActionPerformed

    private void removePatternActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePatternActionPerformed
        ((JSequenceTable)sequenceTable).clearPattern();
    }//GEN-LAST:event_removePatternActionPerformed

    private void testTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testTransferActionPerformed
        new RhythmFileSender().sendPatternSequence(currentSequence);
    }//GEN-LAST:event_testTransferActionPerformed
    
    private void setRhythmTableModel(Pattern tmp){
        if(tmp == null)
            return;
        
        Integer beats = tmp.getBeats();
        Integer division = tmp.getDivision();
        Integer duration = tmp.getBeatTime();
        divisionComboBox.setSelectedItem(division.toString());
        timeSpinner.setValue(duration);
        numberOfBeats.setSelectedItem(beats.toString());
        patternTable.setModel(new javax.swing.table.DefaultTableModel(5,beats * division ));
        currentPattern = tmp;       
       
    }   
    
    private void setRhythmTableModel(){
        int division = Integer.parseInt(divisionComboBox.getSelectedItem().toString());
        int beats = Integer.parseInt(numberOfBeats.getSelectedItem().toString());
        int beatTime = Integer.parseInt(timeSpinner.getValue().toString());
        int cols = division * beats;        
        if(cols > 120){
            cols = 120;
            beats = 120;
            division = 1;
            divisionComboBox.setSelectedIndex(0);
        }
       int cells = cols * 5;   // all table cells 
       patternTable.setModel(new javax.swing.table.DefaultTableModel(5,cols ));
       currentPattern = new Pattern(cells);
       currentPattern.setBeats(beats);
       currentPattern.setDivision(division);
       currentPattern.setBeatTime(beatTime);
       
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
            
        });
        
        
        
    }
    
    // window closing handler
        WindowListener wl = new WindowAdapter(){
            public void windowClosing(WindowEvent e){                
                UsbWriter.deInit();
            }
        };
        
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bassGuitarLabel;
    private javax.swing.JLabel beatLabel;
    private javax.swing.JMenuItem choosePattern;
    private javax.swing.JComboBox<String> divisionComboBox;
    private javax.swing.JLabel drumPatternLabel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenuAdd;
    private javax.swing.JMenuItem fileMenuClose;
    private javax.swing.JMenuItem fileMenuOpen;
    private javax.swing.JMenuItem fileMenuSave;
    private javax.swing.JMenuItem insertOneAfter;
    private javax.swing.JMenuItem insertOneBefore;
    private javax.swing.JPopupMenu insertPatternPopup;
    private javax.swing.JComboBox<String> instrumentComboBox;
    private javax.swing.JLabel instrumentLabel;
    private javax.swing.JLabel leftFootLabel;
    private javax.swing.JLabel leftHandLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JComboBox<String> noteSelectComboBox;
    private javax.swing.JComboBox<String> numberOfBeats;
    private javax.swing.JLabel octaveLabel;
    private javax.swing.JComboBox<String> octaveSelectComboBox;
    private javax.swing.JSeparator paneSeparator;
    private javax.swing.JScrollPane patternScrollPane;
    private javax.swing.JTable patternTable;
    private javax.swing.JButton playPatternButton;
    private javax.swing.JButton playSequenceButton;
    private javax.swing.JMenuItem removePattern;
    private javax.swing.JSpinner repeatPatternSpinner;
    private javax.swing.JLabel resolutionLabel;
    private javax.swing.JLabel rightFootLabel;
    private javax.swing.JLabel rightHandLabel;
    private javax.swing.JButton saveFileButton;
    private javax.swing.JButton savePatternButton;
    private javax.swing.JButton saveSequenceButton;
    private javax.swing.JComboBox selectPatternComboBox;
    private javax.swing.JLabel selectPatternLabel;
    private javax.swing.JComboBox selectSequencePatternComboBox;
    private javax.swing.JScrollPane sequenceScrollPane;
    private javax.swing.JTable sequenceTable;
    private javax.swing.JButton setPatternButton;
    private javax.swing.JButton testTransfer;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JSpinner timeSpinner;
    // End of variables declaration//GEN-END:variables

class CustomCellRenderer extends JLabel implements TableCellRenderer {
 
    
  @Override  
  public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column) {
    
    //Component c = super.getTableCellRendererComponent(table,value,isSelected, hasFocus,row, column);
    //JLabel lab = (JLabel)super.getTableCellRendererComponent(table,value,isSelected, hasFocus,row, column);
    
    
    if(table.getName().equals("patternTable")){
        int rowCount = table.getRowCount();
        int listIndex = column * rowCount + row;
        MidiInstrument instrument = currentPattern.getEventAt(listIndex).getMidiInstrument();
        if( instrument != MidiInstrument.NONE){
            //instrument = currentPatternData[row][column].getMidiInstrument();           
            setOpaque(true);
            setBackground(instrument.getBackground());  
            setToolTipText(instrument.getName());
            
        }
        
        else{ 
            setOpaque(false);
            setBackground(Color.white);
            setToolTipText(MidiInstrument.NONE.getName());
            
         }
    }
    
        else if(table.getName().equals("sequenceTable")){
            if(value != null){
                setHorizontalAlignment(CENTER);
                setText(value.toString());
                setOpaque(true);
                setBackground(Color.yellow);
            }
            else{
                setOpaque(false);
                setBackground(Color.white);
                setText("");
            }
        }
    
    
    return this;
  }
}



}



