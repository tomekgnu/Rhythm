/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rhythm;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Tomek
 */
public class MainFrame extends javax.swing.JFrame {
    private EntityManagerFactory emf;
    private EntityManager em;
    private boolean UsbResult;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        emf = Persistence.createEntityManagerFactory("RhythmPU");
        em = emf.createEntityManager();
        initComponents();
        UsbResult = UsbWriter.init("COM8","Rhythm");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patternScrollPane = new javax.swing.JScrollPane();
        rhythmTable = new javax.swing.JTable();
        instrumentComboBox = new javax.swing.JComboBox<>();
        beatSeparator = new javax.swing.JSeparator();
        drumPatternLabel = new javax.swing.JLabel();
        beatLabel = new javax.swing.JLabel();
        instrumentLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        resolutionLabel = new javax.swing.JLabel();
        resolutionComboBox = new javax.swing.JComboBox<>();
        timeSpinner = new javax.swing.JSpinner();
        paneSeparator = new javax.swing.JSeparator();
        sequenceScrollPane = new javax.swing.JScrollPane();
        sequenceTable = new javax.swing.JTable();
        savePatternButton = new javax.swing.JButton();
        currentPatternComboBox = new javax.swing.JComboBox<>();
        saveSequenceButton = new javax.swing.JButton();
        selectPatternLabel = new javax.swing.JLabel();
        beatUpperNumber = new javax.swing.JComboBox<>();
        beatLowerNumber = new javax.swing.JComboBox<>();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(0, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        patternScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        rhythmTable.setShowGrid(true);
        rhythmTable.setDefaultRenderer(Object.class, new rhythm.CustomCellRenderer());
        rhythmTable.setDefaultEditor(Object.class, null);
        rhythmTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        rhythmTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14", "Title 15", "Title 16", "Title 17", "Title 18", "Title 19", "Title 20", "Title 21", "Title 22", "Title 23", "Title 24", "Title 25", "Title 26", "Title 27", "Title 28", "Title 29", "Title 30", "Title 31", "Title 32"
            }
        ));
        rhythmTable.setFocusable(false);
        rhythmTable.setGridColor(new java.awt.Color(0, 0, 0));
        rhythmTable.setName("patternTable"); // NOI18N
        rhythmTable.setOpaque(false);
        rhythmTable.setRequestFocusEnabled(false);
        rhythmTable.setRowHeight(20);
        rhythmTable.setRowSelectionAllowed(false);
        rhythmTable.setColumnSelectionAllowed(false);
        rhythmTable.setCellSelectionEnabled(false);
        rhythmTable.setShowHorizontalLines(true);
        rhythmTable.setShowVerticalLines(true);
        rhythmTable.setRowSelectionAllowed(false);
        rhythmTable.setTableHeader(null);
        rhythmTable.setUpdateSelectionOnSort(false);
        rhythmTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rhythmTableMouseClicked(evt);
            }
        });
        patternScrollPane.setViewportView(rhythmTable);

        instrumentComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(DrumSet.displayValues()));

        beatSeparator.setBackground(new java.awt.Color(0, 0, 0));
        beatSeparator.setForeground(new java.awt.Color(0, 0, 0));

        drumPatternLabel.setText("Current drum pattern");

        beatLabel.setText("Beat");

        instrumentLabel.setText("Instrument");

        timeLabel.setText("Time");

        resolutionLabel.setText("Resolution");

        resolutionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "4", "8", "16", "32" }));
        resolutionComboBox.setSelectedIndex(4);

        timeSpinner.setValue(60);

        sequenceTable.setTableHeader(null);
        sequenceTable.setShowGrid(true);
        sequenceTable.setColumnSelectionAllowed(false);
        sequenceTable.setRowSelectionAllowed(false);
        sequenceTable.setDefaultRenderer(Object.class, new rhythm.CustomCellRenderer());
        rhythmTable.setDefaultEditor(Object.class, null);
        sequenceTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        sequenceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        sequenceTable.setAutoscrolls(false);
        sequenceTable.setGridColor(new java.awt.Color(0, 0, 0));
        sequenceTable.setName("sequenceTable"); // NOI18N
        sequenceTable.setOpaque(false);
        sequenceTable.setTableHeader(null);
        sequenceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sequenceTableMouseClicked(evt);
            }
        });
        sequenceScrollPane.setViewportView(sequenceTable);

        savePatternButton.setText("Save pattern");
        savePatternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePatternButtonActionPerformed(evt);
            }
        });

        saveSequenceButton.setText("Save sequence");
        saveSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSequenceButtonActionPerformed(evt);
            }
        });

        selectPatternLabel.setText("Select pattern");

        beatUpperNumber.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        beatUpperNumber.setSelectedIndex(3);

        beatLowerNumber.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "8", "16", "32" }));
        beatLowerNumber.setSelectedIndex(2);

        jMenu1.setText("File");

        jMenuItem1.setText("Open rhythm");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Close rhythm");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Save rhythm");
        jMenu1.add(jMenuItem3);

        menuBar.add(jMenu1);

        jMenu2.setText("Edit");
        menuBar.add(jMenu2);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(patternScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 793, Short.MAX_VALUE)
            .addComponent(paneSeparator)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sequenceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveSequenceButton)
                .addGap(63, 63, 63))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(drumPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(instrumentLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(instrumentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(beatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(beatLowerNumber, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(beatSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(beatUpperNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resolutionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resolutionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectPatternLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                            .addComponent(currentPatternComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(55, 55, 55)
                        .addComponent(savePatternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drumPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(patternScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(instrumentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(beatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(instrumentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(selectPatternLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(resolutionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(resolutionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(savePatternButton)
                                    .addComponent(currentPatternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(beatUpperNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(beatSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(beatLowerNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(paneSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(sequenceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(358, 358, 358))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(saveSequenceButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void rhythmTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rhythmTableMouseClicked
//        L_HAND	row 0
//        R_HAND	row 1
//        L_FOOT	row 2
//        R_FOOT	row 3
//        BASS          row 4
        
        int row = rhythmTable.getSelectedRow();
        int col = rhythmTable.getSelectedColumn();
        int index = instrumentComboBox.getSelectedIndex();
                
        switch(DrumSet.getObject(index)){
            case ACOUSTIC_BASS_DRUM:
            case PEDAL_HI_HAT:
                                if(row != 2 && row != 3)
                                    System.out.println("Wrong part of body");
        
        
        
        }
        
        
        
        String value = (String)rhythmTable.getValueAt(rhythmTable.getSelectedRow(), rhythmTable.getSelectedColumn());
        UsbResult = UsbWriter.sendBytes("$".getBytes());
        if(value == null)
            rhythmTable.setValueAt("@", rhythmTable.getSelectedRow(), rhythmTable.getSelectedColumn());
        else
            rhythmTable.setValueAt(null, rhythmTable.getSelectedRow(), rhythmTable.getSelectedColumn());
       // rhythmTable.repaint();
        switch(evt.getButton()){
            case 1: System.out.println("Left");                    
                    break;
            case 3: System.out.println("Right");
            
        }
        rhythmTable.getSelectedColumn();
        rhythmTable.getSelectedRow();
    }//GEN-LAST:event_rhythmTableMouseClicked

    private void savePatternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePatternButtonActionPerformed
        Pattern p = new Pattern();
        p.setPatternPK(new PatternPK());
        p.setBeats(1);
        em.getTransaction().begin();
        em.persist(p);        
        em.getTransaction().commit();
    }//GEN-LAST:event_savePatternButtonActionPerformed

    private void saveSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSequenceButtonActionPerformed
        Sequence s = new Sequence();
        s.setSequencePK(new SequencePK());
        s.setPatternID(1);
        em.getTransaction().begin();
        em.persist(s);
        em.getTransaction().commit();
    }//GEN-LAST:event_saveSequenceButtonActionPerformed

    private void sequenceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sequenceTableMouseClicked
        String value = (String)sequenceTable.getValueAt(sequenceTable.getSelectedRow(), sequenceTable.getSelectedColumn());
        if(value == null)
            sequenceTable.setValueAt("", sequenceTable.getSelectedRow(), sequenceTable.getSelectedColumn());
        else
            sequenceTable.setValueAt(null, sequenceTable.getSelectedRow(), sequenceTable.getSelectedColumn());
    }//GEN-LAST:event_sequenceTableMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
            
        });
        
        
        
    }
    
    // window closing handler
        WindowListener wl = new WindowAdapter(){
            public void windowClosing(WindowEvent e){
                em.close();
                emf.close();
            }
        };
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel beatLabel;
    private javax.swing.JComboBox<String> beatLowerNumber;
    private javax.swing.JSeparator beatSeparator;
    private javax.swing.JComboBox<String> beatUpperNumber;
    private javax.swing.JComboBox<String> currentPatternComboBox;
    private javax.swing.JLabel drumPatternLabel;
    private javax.swing.JComboBox<String> instrumentComboBox;
    private javax.swing.JLabel instrumentLabel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JSeparator paneSeparator;
    private javax.swing.JScrollPane patternScrollPane;
    private javax.swing.JComboBox<String> resolutionComboBox;
    private javax.swing.JLabel resolutionLabel;
    private javax.swing.JTable rhythmTable;
    private javax.swing.JButton savePatternButton;
    private javax.swing.JButton saveSequenceButton;
    private javax.swing.JLabel selectPatternLabel;
    private javax.swing.JScrollPane sequenceScrollPane;
    private javax.swing.JTable sequenceTable;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JSpinner timeSpinner;
    // End of variables declaration//GEN-END:variables
}
